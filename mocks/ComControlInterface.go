// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// ComControlInterface is an autogenerated mock type for the ComControlInterface type
type ComControlInterface struct {
	mock.Mock
}

type ComControlInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ComControlInterface) EXPECT() *ComControlInterface_Expecter {
	return &ComControlInterface_Expecter{mock: &_m.Mock}
}

// SendSpineMessage provides a mock function with given fields: datagram
func (_m *ComControlInterface) SendSpineMessage(datagram model.DatagramType) error {
	ret := _m.Called(datagram)

	if len(ret) == 0 {
		panic("no return value specified for SendSpineMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DatagramType) error); ok {
		r0 = rf(datagram)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComControlInterface_SendSpineMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSpineMessage'
type ComControlInterface_SendSpineMessage_Call struct {
	*mock.Call
}

// SendSpineMessage is a helper method to define mock.On call
//   - datagram model.DatagramType
func (_e *ComControlInterface_Expecter) SendSpineMessage(datagram interface{}) *ComControlInterface_SendSpineMessage_Call {
	return &ComControlInterface_SendSpineMessage_Call{Call: _e.mock.On("SendSpineMessage", datagram)}
}

func (_c *ComControlInterface_SendSpineMessage_Call) Run(run func(datagram model.DatagramType)) *ComControlInterface_SendSpineMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.DatagramType))
	})
	return _c
}

func (_c *ComControlInterface_SendSpineMessage_Call) Return(_a0 error) *ComControlInterface_SendSpineMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComControlInterface_SendSpineMessage_Call) RunAndReturn(run func(model.DatagramType) error) *ComControlInterface_SendSpineMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewComControlInterface creates a new instance of ComControlInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComControlInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComControlInterface {
	mock := &ComControlInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
