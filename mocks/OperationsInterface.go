// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	model "github.com/lyn0904/spine-go/model"
	mock "github.com/stretchr/testify/mock"
)

// OperationsInterface is an autogenerated mock type for the OperationsInterface type
type OperationsInterface struct {
	mock.Mock
}

type OperationsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OperationsInterface) EXPECT() *OperationsInterface_Expecter {
	return &OperationsInterface_Expecter{mock: &_m.Mock}
}

// Information provides a mock function with given fields:
func (_m *OperationsInterface) Information() *model.PossibleOperationsType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Information")
	}

	var r0 *model.PossibleOperationsType
	if rf, ok := ret.Get(0).(func() *model.PossibleOperationsType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PossibleOperationsType)
		}
	}

	return r0
}

// OperationsInterface_Information_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Information'
type OperationsInterface_Information_Call struct {
	*mock.Call
}

// Information is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) Information() *OperationsInterface_Information_Call {
	return &OperationsInterface_Information_Call{Call: _e.mock.On("Information")}
}

func (_c *OperationsInterface_Information_Call) Run(run func()) *OperationsInterface_Information_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_Information_Call) Return(_a0 *model.PossibleOperationsType) *OperationsInterface_Information_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_Information_Call) RunAndReturn(run func() *model.PossibleOperationsType) *OperationsInterface_Information_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *OperationsInterface) Read() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OperationsInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type OperationsInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) Read() *OperationsInterface_Read_Call {
	return &OperationsInterface_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *OperationsInterface_Read_Call) Run(run func()) *OperationsInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_Read_Call) Return(_a0 bool) *OperationsInterface_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_Read_Call) RunAndReturn(run func() bool) *OperationsInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPartial provides a mock function with given fields:
func (_m *OperationsInterface) ReadPartial() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadPartial")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OperationsInterface_ReadPartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPartial'
type OperationsInterface_ReadPartial_Call struct {
	*mock.Call
}

// ReadPartial is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) ReadPartial() *OperationsInterface_ReadPartial_Call {
	return &OperationsInterface_ReadPartial_Call{Call: _e.mock.On("ReadPartial")}
}

func (_c *OperationsInterface_ReadPartial_Call) Run(run func()) *OperationsInterface_ReadPartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_ReadPartial_Call) Return(_a0 bool) *OperationsInterface_ReadPartial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_ReadPartial_Call) RunAndReturn(run func() bool) *OperationsInterface_ReadPartial_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *OperationsInterface) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OperationsInterface_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type OperationsInterface_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) String() *OperationsInterface_String_Call {
	return &OperationsInterface_String_Call{Call: _e.mock.On("String")}
}

func (_c *OperationsInterface_String_Call) Run(run func()) *OperationsInterface_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_String_Call) Return(_a0 string) *OperationsInterface_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_String_Call) RunAndReturn(run func() string) *OperationsInterface_String_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields:
func (_m *OperationsInterface) Write() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OperationsInterface_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type OperationsInterface_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) Write() *OperationsInterface_Write_Call {
	return &OperationsInterface_Write_Call{Call: _e.mock.On("Write")}
}

func (_c *OperationsInterface_Write_Call) Run(run func()) *OperationsInterface_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_Write_Call) Return(_a0 bool) *OperationsInterface_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_Write_Call) RunAndReturn(run func() bool) *OperationsInterface_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WritePartial provides a mock function with given fields:
func (_m *OperationsInterface) WritePartial() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WritePartial")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OperationsInterface_WritePartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePartial'
type OperationsInterface_WritePartial_Call struct {
	*mock.Call
}

// WritePartial is a helper method to define mock.On call
func (_e *OperationsInterface_Expecter) WritePartial() *OperationsInterface_WritePartial_Call {
	return &OperationsInterface_WritePartial_Call{Call: _e.mock.On("WritePartial")}
}

func (_c *OperationsInterface_WritePartial_Call) Run(run func()) *OperationsInterface_WritePartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OperationsInterface_WritePartial_Call) Return(_a0 bool) *OperationsInterface_WritePartial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationsInterface_WritePartial_Call) RunAndReturn(run func() bool) *OperationsInterface_WritePartial_Call {
	_c.Call.Return(run)
	return _c
}

// NewOperationsInterface creates a new instance of OperationsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationsInterface {
	mock := &OperationsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
